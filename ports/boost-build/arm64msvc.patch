diff --git a/src/tools/msvc.jam b/src/tools/msvc.jam
index dda22b4c5..c756eda21 100644
--- a/src/tools/msvc.jam
+++ b/src/tools/msvc.jam
@@ -468,6 +494,7 @@ rule configure-version-specific ( toolset : version : conditions )
         toolset.flags $(toolset).link LINKFLAGS $(conditions)/$(.cpu-arch-i386)  : "/MACHINE:X86" ;
         toolset.flags $(toolset).link LINKFLAGS $(conditions)/$(.cpu-arch-ia64)  : "/MACHINE:IA64" ;
         toolset.flags $(toolset).link LINKFLAGS $(conditions)/$(.cpu-arch-arm)   : "/MACHINE:ARM" ;
+        toolset.flags $(toolset).link LINKFLAGS $(conditions)/$(.cpu-arch-arm64) : "/MACHINE:ARM64" ;
 
         # Make sure that manifest will be generated even if there is no
         # dependencies to put there.
@@ -534,15 +561,9 @@ rule compile.asm ( targets + : sources * : properties * )
     set-setup-command $(targets) : $(properties) ;
 }
 
-# For the assembler the following options are turned on by default:
-#
-#   -Zp4   align structures to 4 bytes
-#   -Cp    preserve case of user identifiers
-#   -Cx    preserve case in publics, externs
-#
 actions compile.asm
 {
-    $(.SETUP) $(.ASM) -c -Zp4 -Cp -Cx -D$(DEFINES) $(ASMFLAGS) $(USER_ASMFLAGS) -Fo "$(<:W)" "$(>:W)"
+    $(.SETUP) $(.ASM) $(USER_ASMFLAGS) $(.ASM_OUTPUT) "$(<:W)" "$(>:W)"
 }
 
 
@@ -1282,7 +1303,7 @@ local rule configure-really ( version ? : options * )
         local below-8.0 = [ MATCH "^([67]\\.)" : $(version) ] ;
         local below-11.0 = [ MATCH "^([6789]\\.|10\\.)" : $(version) ] ;
 
-        local cpu = i386 amd64 ia64 arm ;
+        local cpu = i386 amd64 ia64 arm arm64 ;
         if $(below-8.0)
         {
             cpu = i386 ;
@@ -1296,6 +1317,7 @@ local rule configure-really ( version ? : options * )
         local setup-i386 ;
         local setup-ia64 ;
         local setup-arm ;
+        local setup-arm64 ;
         local setup-phone-i386 ;
         local setup-phone-arm ;
 
@@ -1353,6 +1375,7 @@ local rule configure-really ( version ? : options * )
             local default-setup-i386  = vcvars32.bat ;
             local default-setup-ia64  = vcvarsx86_ia64.bat ;
             local default-setup-arm   = vcvarsx86_arm.bat ;
+            local default-setup-arm64 = vcvarsx86_arm64.bat ;
             local default-setup-phone-i386 = vcvarsphonex86.bat ;
             local default-setup-phone-arm = vcvarsphonex86_arm.bat ;
 
@@ -1364,6 +1387,7 @@ local rule configure-really ( version ? : options * )
             local default-global-setup-options-i386  = x86 ;
             local default-global-setup-options-ia64  = x86_ia64 ;
             local default-global-setup-options-arm   = x86_arm ;
+            local default-global-setup-options-arm64 = x86_arm64 ;
 
             # When using 64-bit Windows, and targeting 64-bit, it is possible to
             # use a native 64-bit compiler, selected by the "amd64" & "ia64"
@@ -1443,7 +1467,26 @@ local rule configure-really ( version ? : options * )
         local default-assembler-amd64 = ml64 ;
         local default-assembler-i386  = "ml -coff" ;
         local default-assembler-ia64  = ias ;
-        local default-assembler-ia64  = armasm ;
+        local default-assembler-arm   = armasm ;
+        local default-assembler-arm64 = armasm64 ;
+
+        # For the assembler the following options are turned on by default:
+        #
+        #   -Zp4   align structures to 4 bytes
+        #   -Cp    preserve case of user identifiers
+        #   -Cx    preserve case in publics, externs
+        #
+        local assembler-flags-amd64 = -c -Zp4 -Cp -Cx -D$(DEFINES) $(ASMFLAGS);
+        local assembler-flags-i386  = -c -Zp4 -Cp -Cx -D$(DEFINES) $(ASMFLAGS) ;
+        local assembler-flags-ia64  = -c -Zp4 -Cp -Cx -D$(DEFINES) $(ASMFLAGS) ;
+        local assembler-flags-arm   = "" ;
+        local assembler-flags-arm64 = "" ;
+
+        local assembler-output-flag-amd64 = -Fo ;
+        local assembler-output-flag-i386  = -Fo ;
+        local assembler-output-flag-ia64  = -Fo ;
+        local assembler-output-flag-arm   = -o ;
+        local assembler-output-flag-arm64 = -o ;
 
         assembler = [ feature.get-values <assembler> : $(options) ] ;
 
@@ -1476,6 +1519,8 @@ local rule configure-really ( version ? : options * )
 
             local cpu-assembler = $(assembler) ;
             cpu-assembler ?= $(default-assembler-$(c)) ;
+            local assembler-flags = $(assembler-flags-$(c)) ;
+            local assembler-output-flag = $(assembler-output-flag-$(c)) ;
 
             for local api in desktop store phone
             {
@@ -1517,7 +1562,8 @@ local rule configure-really ( version ? : options * )
                 {
                     toolset.flags msvc.compile .CC  <windows-api>$(api)/$(cpu-conditions) : $(compiler) /Zm800 /ZW /EHsc -nologo ;
                 }
-                toolset.flags msvc.compile .ASM <windows-api>$(api)/$(cpu-conditions) : $(cpu-assembler) -nologo ;
+                toolset.flags msvc.compile .ASM <windows-api>$(api)/$(cpu-conditions) : $(cpu-assembler) $(assembler-flags) -nologo ;
+                toolset.flags msvc.compile .ASM_OUTPUT <windows-api>$(api)/$(cpu-conditions) : $(assembler-output-flag) ;
                 toolset.flags msvc.link    .LD  <windows-api>$(api)/$(cpu-conditions) : $(linker) /NOLOGO "/INCREMENTAL:NO" ;
                 toolset.flags msvc.archive .LD  <windows-api>$(api)/$(cpu-conditions) : $(linker) /lib /NOLOGO  ;
             }
@@ -1937,6 +2008,9 @@ if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
     <architecture>arm/<address-model>
     <architecture>arm/<address-model>32 ;
 
+.cpu-arch-arm64 =
+    <architecture>arm/<address-model>
+    <architecture>arm/<address-model>64 ;
 
 # Supported CPU types (only Itanium optimization options are supported from
 # VC++ 2005 on). See
